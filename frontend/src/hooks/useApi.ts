"use client";

import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import type { SteamPlayerSummariesResponse } from "@/types/app";

// API —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–µ–Ω–¥–æ–º
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3001";

export interface ApiItem {
  id: number;
  classId: string;
  ownerSteamId: string;
  oldOwnerSteamId: string;
  signatureGenerated: boolean;
  isClaimed: boolean;
  // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
}

export interface ApiResponse<T> {
  data?: T;
  error?: string;
}

export interface ClaimSignatureRequest {
  steamId: string;
  itemId: string;
  walletAddress: string;
}

export interface ClaimSignatureResponse {
  signature: {
    signature: `0x${string}`;
    contractAddress: `0x${string}`;
    transferData: {
      to: `0x${string}`;
      from: `0x${string}`;
      tokenId: string;
      nonce: string;
      deadline: string;
    }
  }
}

export interface UserByWalletResponse {
  steamId: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserItems(
  steamId: string
): Promise<ApiResponse<{ items: ApiItem[] }>> {
  try {
    console.log(`üì° Fetching items for steamId: ${steamId}`);

    const response = await fetch(`${API_BASE_URL}/api/items/${steamId}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(
        errorData.error || `HTTP ${response.status}: ${response.statusText}`
      );
    }

    const data = await response.json();
    console.log(`‚úÖ Successfully fetched items for steamId ${steamId}:`, data);

    return { data };
  } catch (error) {
    console.error(`‚ùå Error fetching items for steamId ${steamId}:`, error);
    return { error: error instanceof Error ? error.message : "Unknown error" };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∫–ª–µ–π–º–∞
export async function getClaimSignature(
  request: ClaimSignatureRequest
): Promise<ApiResponse<ClaimSignatureResponse>> {
  try {
    console.log(`üì° Requesting claim signature for item ${request.itemId}`);

    const response = await fetch(`${API_BASE_URL}/api/claim/signature`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(request),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(
        errorData.error || `HTTP ${response.status}: ${response.statusText}`
      );
    }

    const data = await response.json();
    console.log(`‚úÖ Successfully got claim signature:`, data);

    return { data };
  } catch (error) {
    console.error(`‚ùå Error getting claim signature:`, error);
    return { error: error instanceof Error ? error.message : "Unknown error" };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Steam ID –ø–æ wallet address
export async function getUserByWallet(
  walletAddress: string
): Promise<ApiResponse<UserByWalletResponse>> {
  try {
    console.log(`üì° Fetching user for wallet: ${walletAddress}`);

    const response = await fetch(`${API_BASE_URL}/api/user/${walletAddress}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(
        errorData.error || `HTTP ${response.status}: ${response.statusText}`
      );
    }

    const data = await response.json();
    console.log(
      `‚úÖ Successfully fetched user for wallet ${walletAddress}:`,
      data
    );

    return { data };
  } catch (error) {
    console.error(`‚ùå Error fetching user for wallet ${walletAddress}:`, error);
    return { error: error instanceof Error ? error.message : "Unknown error" };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Steam –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
export async function getSteamPlayerInfo(
  steamId: string
): Promise<ApiResponse<SteamPlayerSummariesResponse>> {
  try {
    console.log(`üì° Fetching Steam player info for steamId: ${steamId}`);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à Next.js API route –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
    const response = await fetch(`/api/steam?steamid=${steamId}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(
        errorData.error || `HTTP ${response.status}: ${response.statusText}`
      );
    }

    const data = await response.json();
    console.log(`‚úÖ Successfully fetched Steam player info:`, data);

    return { data };
  } catch (error) {
    console.error(`‚ùå Error fetching Steam player info:`, error);
    return { error: error instanceof Error ? error.message : "Unknown error" };
  }
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function useUserItems(steamId: string | undefined) {
  return useQuery({
    queryKey: ["userItems", steamId],
    queryFn: async () => {
      if (!steamId) {
        throw new Error("SteamId is required");
      }

      const result = await getUserItems(steamId);
      if (result.error) {
        throw new Error(result.error);
      }

      return result.data;
    },
    enabled: !!steamId,
    staleTime: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥
  });
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ –∫–ª–µ–π–º–∞
export function useClaimSignature() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (request: ClaimSignatureRequest) => {
      const result = await getClaimSignature(request);
      if (result.error) {
        throw new Error(result.error);
      }
      return result.data;
    },
    onSuccess: (data, variables) => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–ª–µ–π–º–∞
      queryClient.invalidateQueries({
        queryKey: ["userItems", variables.steamId],
      });

      console.log("‚úÖ Claim signature obtained successfully:", data);
    },
    onError: (error) => {
      console.error("‚ùå Failed to get claim signature:", error);
    },
  });
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Steam –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
export function useSteamPlayerInfo(steamId: string | undefined) {
  return useQuery({
    queryKey: ["steamPlayerInfo", steamId],
    queryFn: async () => {
      if (!steamId) {
        throw new Error("SteamId is required");
      }

      const result = await getSteamPlayerInfo(steamId);
      if (result.error) {
        throw new Error(result.error);
      }

      return result.data;
    },
    enabled: !!steamId,
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    gcTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
  });
}
